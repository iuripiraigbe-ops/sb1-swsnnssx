#!/usr/bin/env node

/**
 * Script de teste para verificar a migra√ß√£o para Neon + Upstash
 * Execute: node test-migration.js
 */

import { spawn } from 'node:child_process';
import { readFileSync } from 'node:fs';

console.log('üß™ Testando migra√ß√£o para Neon + Upstash...\n');

// Test 1: Verificar se as vari√°veis de ambiente est√£o configuradas
console.log('1Ô∏è‚É£ Verificando vari√°veis de ambiente...');
const requiredEnvVars = [
  'DATABASE_URL',
  'REDIS_URL',
  'JWT_SECRET',
  'JWT_REFRESH_SECRET'
];

let missingVars = [];
for (const varName of requiredEnvVars) {
  if (!process.env[varName]) {
    missingVars.push(varName);
  }
}

if (missingVars.length > 0) {
  console.log(`‚ùå Vari√°veis ausentes: ${missingVars.join(', ')}`);
  console.log('   Configure as vari√°veis de ambiente primeiro!');
  process.exit(1);
} else {
  console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');
}

// Test 2: Verificar se o REDIS_URL est√° no formato correto
console.log('\n2Ô∏è‚É£ Verificando formato do REDIS_URL...');
const redisUrl = process.env.REDIS_URL;
if (!redisUrl.startsWith('rediss://')) {
  console.log('‚ùå REDIS_URL deve come√ßar com "rediss://" para Upstash');
  console.log('   Formato esperado: rediss://:SENHA@HOST:PORTA');
  process.exit(1);
} else {
  console.log('‚úÖ REDIS_URL est√° no formato correto para Upstash');
}

// Test 3: Verificar se o DATABASE_URL est√° no formato correto
console.log('\n3Ô∏è‚É£ Verificando formato do DATABASE_URL...');
const dbUrl = process.env.DATABASE_URL;
if (!dbUrl.includes('neon.tech')) {
  console.log('‚ö†Ô∏è  DATABASE_URL n√£o parece ser do Neon');
  console.log('   Verifique se est√° usando a URL correta do Neon');
} else {
  console.log('‚úÖ DATABASE_URL parece ser do Neon');
}

// Test 4: Verificar se FFmpeg est√° instalado
console.log('\n4Ô∏è‚É£ Verificando se FFmpeg est√° instalado...');
const ffmpegCheck = spawn('ffmpeg', ['-version']);
ffmpegCheck.on('close', (code) => {
  if (code === 0) {
    console.log('‚úÖ FFmpeg est√° instalado');
  } else {
    console.log('‚ùå FFmpeg n√£o est√° instalado');
    console.log('   Instale o FFmpeg para transcodifica√ß√£o de v√≠deos');
  }
});

// Test 5: Verificar se o Prisma est√° configurado
console.log('\n5Ô∏è‚É£ Verificando configura√ß√£o do Prisma...');
try {
  const schemaPath = './prisma/schema.prisma';
  const schema = readFileSync(schemaPath, 'utf8');
  
  if (schema.includes('provider = "postgresql"') && schema.includes('url = env("DATABASE_URL")')) {
    console.log('‚úÖ Schema do Prisma est√° configurado corretamente');
  } else {
    console.log('‚ùå Schema do Prisma n√£o est√° configurado corretamente');
  }
} catch (error) {
  console.log('‚ùå Erro ao ler schema do Prisma:', error.message);
}

// Test 6: Verificar se os clientes singleton existem
console.log('\n6Ô∏è‚É£ Verificando clientes singleton...');
const files = [
  './src/lib/db.ts',
  './src/lib/redis.ts'
];

for (const file of files) {
  try {
    readFileSync(file, 'utf8');
    console.log(`‚úÖ ${file} existe`);
  } catch (error) {
    console.log(`‚ùå ${file} n√£o existe`);
  }
}

console.log('\nüéâ Teste de migra√ß√£o conclu√≠do!');
console.log('\nüìã Pr√≥ximos passos:');
console.log('1. Configure as vari√°veis de ambiente no seu PaaS');
console.log('2. Execute: npx prisma migrate deploy');
console.log('3. Execute: npx prisma generate');
console.log('4. Teste o healthcheck: GET /health');
console.log('5. Teste registro/login');
console.log('6. Teste upload de v√≠deo ‚â§90s');
